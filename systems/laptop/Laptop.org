#+title: The Laptop - NixOS configuration

* Welcome stranger!

This is part of my current and ever evolving effort to configure my systems and the software that run on them. Right now it is single page and long document, part of the plan is to modularize theese documents for code reuse and my mental health.

It is written in Emacs as an Org Mode document. Emacs is at the center of this effort with git in a supporting role. Which means that the org-mode files are the source of truth.
From the org-mode files we configure the rest of the system. I will add some bootstrap information in each of the files. It is mostly the same approach on all systems.
install minimal NixOS following install follow the repective manuals -> clone git ->configure emacs -> configure systems -> reboot.


#+begin_src shell
  ln -s ~/dotfiles/out /etc/nixos/
#+end_src

*NOTE:* Inspired by [[https://github.com/daviwil/emacs-from-scratch/][Emacs from scratch by System Crafters]]

* Bootstrap

Boostrapping my systems involves installing NixOs in a predictable way so that configuring them is jus git clone -> symlink -> rebuild -> reboot -> apply Emacs config. TODO how to handle secrets(ssh-keys and gpg keys)

#+begin_src shell 
  
#+end_src

* Tips

Here there will be some comments on hoe to use this file

* Configs

Here are some configs for other software I use .

** Sway

#+begin_src nix :tangle ~/configs/sway.nix

#+end_src

#+begin_src conf-unix :tangle ~/.config/sway/config

  # Default config for sway
  #
  # Copy this to ~/.config/sway/config and edit it to your liking.
  #
  # Read `man 5 sway` for a complete reference.

  ### Variables
  #
  # Logo key. Use Mod1 for Alt.
  set $mod Mod4
  # Home row direction keys, like vim
  set $left h
  set $down j
  set $up k
  set $right l
  # Your preferred terminal emulator
  set $term alacritty
  # Your preferred application launcher
  # Note: pass the final command to swaymsg so that the resulting window can be opened
  # on the original workspace that the command was run on.
  set $menu dmenu_path | dmenu | xargs swaymsg exec --

  ### Output configuration

  #
  # Default wallpaper (more resolutions are available in /run/current-system/sw/share/backgrounds/sway/)
  output * bg /home/geir/Pictures/wallpaper/ fill
  #
  # Example configuration:
  #
  #   output HDMI-A-1 resolution 1920x1080 position 1920,0
  #
  # You can get the names of your outputs by running: swaymsg -t get_outputs

  ### Idle configuration
  #
  # Example configuration:
  #
  # exec swayidle -w \
  #          timeout 300 'swaylock -f -c 000000' \
  #          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
  #          before-sleep 'swaylock -f -c 000000'
  #
  # This will lock your screen after 300 seconds of inactivity, then turn off
  # your displays after another 300 seconds, and turn your screens back on when
  # resumed. It will also lock your screen before your computer goes to sleep.

  ### Input configuration
  #
  # Example configuration:
  #
  #   input "2:14:SynPS/2_Synaptics_TouchPad" {
  #       dwt enabled
  #       tap enabled
  #       natural_scroll enabled
  #       middle_emulation enabled
  #   }
  #
  # You can get the names of your inputs by running: swaymsg -t get_inputs
  # Read `man 5 sway-input` for more information about this section.

  ### Key bindings
  #
  # Basics:
  #
  # Start a terminal

  bindsym $mod+Return exec $term

      # Kill focused window
      bindsym $mod+Shift+q kill

      # Start your launcher
      bindsym $mod+d exec $menu

      # Drag floating windows by holding down $mod and left mouse button.
      # Resize them with right mouse button + $mod.
      # Despite the name, also works for non-floating windows.
      # Change normal to inverse to use left mouse button for resizing and right
      # mouse button for dragging.
      floating_modifier $mod normal

      # Reload the configuration file
      bindsym $mod+Shift+c reload

      # Exit sway (logs you out of your Wayland session)
      bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
  #
  # Moving around:
  #
      # Move your focus around
      bindsym $mod+$left focus left
      bindsym $mod+$down focus down
      bindsym $mod+$up focus up
      bindsym $mod+$right focus right
      # Or use $mod+[up|down|left|right]
      bindsym $mod+Left focus left
      bindsym $mod+Down focus down
      bindsym $mod+Up focus up
      bindsym $mod+Right focus right

      # Move the focused window with the same, but add Shift
      bindsym $mod+Shift+$left move left
      bindsym $mod+Shift+$down move down
      bindsym $mod+Shift+$up move up
      bindsym $mod+Shift+$right move right
      # Ditto, with arrow keys
      bindsym $mod+Shift+Left move left
      bindsym $mod+Shift+Down move down
      bindsym $mod+Shift+Up move up
      bindsym $mod+Shift+Right move right
  #
  # Workspaces:
  #
      # Switch to workspace
      bindsym $mod+1 workspace number 1
      bindsym $mod+2 workspace number 2
      bindsym $mod+3 workspace number 3
      bindsym $mod+4 workspace number 4
      bindsym $mod+5 workspace number 5
      bindsym $mod+6 workspace number 6
      bindsym $mod+7 workspace number 7
      bindsym $mod+8 workspace number 8
      bindsym $mod+9 workspace number 9
      bindsym $mod+0 workspace number 10
      # Move focused container to workspace
      bindsym $mod+Shift+1 move container to workspace number 1
      bindsym $mod+Shift+2 move container to workspace number 2
      bindsym $mod+Shift+3 move container to workspace number 3
      bindsym $mod+Shift+4 move container to workspace number 4
      bindsym $mod+Shift+5 move container to workspace number 5
      bindsym $mod+Shift+6 move container to workspace number 6
      bindsym $mod+Shift+7 move container to workspace number 7
      bindsym $mod+Shift+8 move container to workspace number 8
      bindsym $mod+Shift+9 move container to workspace number 9
      bindsym $mod+Shift+0 move container to workspace number 10
      # Note: workspaces can have any name you want, not just numbers.
      # We just use 1-10 as the default.
  #
  # Layout stuff:
  #
      # You can "split" the current object of your focus with
      # $mod+b or $mod+v, for horizontal and vertical splits
      # respectively.
      bindsym $mod+b splith
      bindsym $mod+v splitv

      # Switch the current container between different layout styles
      bindsym $mod+s layout stacking
      bindsym $mod+w layout tabbed
      bindsym $mod+e layout toggle split

      # Make the current focus fullscreen
      bindsym $mod+f fullscreen

      # Toggle the current focus between tiling and floating mode
      bindsym $mod+Shift+space floating toggle

      # Swap focus between the tiling area and the floating area
      bindsym $mod+space focus mode_toggle

      # Move focus to the parent container
      bindsym $mod+a focus parent
  #
  # Scratchpad:
  #
      # Sway has a "scratchpad", which is a bag of holding for windows.
      # You can send windows there and get them back later.

      # Move the currently focused window to the scratchpad
      bindsym $mod+Shift+minus move scratchpad

      # Show the next scratchpad window or hide the focused scratchpad window.
      # If there are multiple scratchpad windows, this command cycles through them.
      bindsym $mod+minus scratchpad show
  #
  # Resizing containers:
  #
  mode "resize" {
      # left will shrink the containers width
      # right will grow the containers width
      # up will shrink the containers height
      # down will grow the containers height
      bindsym $left resize shrink width 10px
      bindsym $down resize grow height 10px
      bindsym $up resize shrink height 10px
      bindsym $right resize grow width 10px

      # Ditto, with arrow keys
      bindsym Left resize shrink width 10px
      bindsym Down resize grow height 10px
      bindsym Up resize shrink height 10px
      bindsym Right resize grow width 10px

      # Return to default mode
      bindsym Return mode "default"
      bindsym Escape mode "default"
  }
  bindsym $mod+r mode "resize"

  #
  # Status Bar:
  #
  # Read `man 5 sway-bar` for more information about this section.
  bar {
      position top

      # When the status_command prints a new line to stdout, swaybar updates.
      # The default just shows the current date and time.
      status_command while date +'%Y-%m-%d %I:%M:%S %p'; do sleep 1; done

      colors {
          statusline #ffffff
          background #323232
          inactive_workspace #32323200 #32323200 #5c5c5c
      }
  }

  include /etc/sway/config.d/*

#+end_src

** Alacritty

#+begin_src yaml :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
  font:
    normal:
      family: MesloLGS NF
      style: Regular
    bold:
      family:  MesloLGS NF
      style: Bold

    italic:
      family:  MesloLGS NF
      style: Italic

    bold_italic:
      family:  MesloLGS NF
      style: Bold Italic

    size: 14

  import:
    - ~/.config/alacritty/dracula.yml

#+end_src

#+begin_src conf-unix :tangle ~/.config/alacritty/dracula.yml :mkdirp yes
# Colors (Dracula)
colors:
  # Default colors
  primary:
    background: '0x282a36'
    foreground: '0xf8f8f2'
 
  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xff5555'
    green:   '0x50fa7b'
    yellow:  '0xf1fa8c'
    blue:    '0xbd93f9'
    magenta: '0xff79c6'
    cyan:    '0x8be9fd'
    white:   '0xbbbbbb'
 
  # Bright colors
  bright:
    black:   '0x555555'
    red:     '0xff5555'
    green:   '0x50fa7b'
    yellow:  '0xf1fa8c'
    blue:    '0xcaa9fa'
    magenta: '0xff79c6'
    cyan:    '0x8be9fd'
    white:   '0xffffff'

#+end_src

** Bash

#+begin_src conf-unix :tangle ~/.bashrc
   eval "$(starship init bash)"
#+end_src

** Zsh

#+begin_src 

#+end_src

** Starship

#+begin_src conf-unix :tangle ~/.config/starship.toml :mkdirp yes

  # Editor completions based on the config schema
  "$schema" = 'https://starship.rs/config-schema.json'

  # Use custom format
  format = '''(bold green)$username@$hostname$all '''

  # Inserts a blank line between shell prompts
  add_newline = true

  [aws]
  style = "bold #ffb86c"

  [character]
  error_symbol = "[❄](bold #ff5555)"
  success_symbol = "[❄](bold #50fa7b)"

  [cmd_duration]
  style = "bold #f1fa8c"

  [directory]
  style = "bold #50fa7b"

  [git_branch]
  style = "bold #ff79c6"

  [git_status]
  style = "bold #ff5555"

  [hostname]
  style = "bold #bd93f9"

  [username]
  format = "[$user]($style) on "
  style_user = "bold #8be9fd"

#+end_src

* Emacs

Use: C-c C-v t
Tips: "M-x all-the-icons-install-fonts"

#+begin_src nix :tangle ~/configs/emacs.nix :mkdirp yes

#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

  ;; Display startup time
  (defun geokkjer/display-startup-time ()
    (message "Emacs loaded in %s with %d grabage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'geokkjer/display-startup-time)

  ;; Set some initial 
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Packages
  ;; Initialize package sources
  (require 'package)

  ;; Set the repos
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package in case we are on non-Linux platform
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Auto-update packages
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

  ;; UI tweaks

  ;; Turns off the startup-message
  (setq inhibit-startup-message t)

  ;; Disable UI-elements
  (scroll-bar-mode -1)  ; Disable visible scrollbar
  (tool-bar-mode -1)    ; Disable the toolbar
  (tooltip-mode -1)     ; Disable tooltips
  (set-fringe-mode 10)  ; Give us some breathing room

  (menu-bar-mode -1)    ; Disable the menu bar

  ;; Set up the visual bell
  (setq visible-bell t)

  ;; Fonts
  (defvar geokkjer/default-font-size 140)

  (set-face-attribute 'default nil :font "Fira Code" :height geokkjer/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 140)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "MesloLGS NF" :height 130 :weight 'regular)

  ;; Setting to auto reload files
  (setq auto-revert-mode t)

  ;; Doom modline, all-the-icons and doom-theme
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 15)))

  (use-package all-the-icons)

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

  ;; line numbers 

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  geiser-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))



#+end_src

** KEEP the folders clean

This is where I will put some things to keep my .emacs.d folder clean

#+begin_src emacs-lisp

;;  (use-package no-littering)
  
;;  (setq auto-save-file-name-transforms
;;        '((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Swiper

#+begin_src emacs-lisp

  (use-package swiper)


#+end_src

** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-reverse-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reversee-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

** Counsel

#+begin_src emacs-lisp

    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x b" . counsel-ibuffer)
             ("C-x C-f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-r" .'counsel-minibuffer-history))
      :config
      (setq ivy-initial-inputs-alist nil)
      (counsel-mode 1))

#+end_src

** Which key

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

  #+end_src

** Org-mode

Org-mode configuration :TODO Redo, it work but more work is needed

*** basic

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  ;; Org Mode Configuration  

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			      '(("^ *\\([-]\\) "
				 (0 (prog1 () (compose-region
					       (match-beginning1)
					       (match-end 1)
					       "•")))))))

  ;; Show overview when open
  (setq org-startup-folded t)

  ;; Set faces for heading levels
  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "MesloLGS NF" :weight 'regular
			  :height (cdr face))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit
			  '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face
							fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    (defun efs/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
	    visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . efs/org-mode-visual-fill)))

#+end_src

*** org-babel

Enable Org-babbel for emacs-lisp, shell and python. Turn on org-babel-tangle.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (require 'ob-go)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((lisp . t)
       (scheme . t)
       (emacs-lisp . t)
       (shell . t)
       (go . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (setq org-confirm-babel-evaluate nil)

  ;; This is needed as of Org 9.2
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("nx" . "src nix")))


  ;; Automaticly tangle Emacs.org on save
  (defun geokkjer/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/systems/laptop/Laptop.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'geokkjer/org-babel-tangle-config)))

  (setq org-src-tab-acts-natively t)

#+end_src

*** lorem ipsum generator

Sometimes you need some dummy text

#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :after org)
#+end_src

** Languages and lsp-mode configuration

Configuration for different programming languages that I use, or want to learn.

*** lsp-mode

lsp-mode is a mode TODO:

**** lsp-basic

lsp-mode basic configuration including automatic headerline in lsp-mod . description. TODO

#+begin_src emacs-lisp

  (defun geokkjer/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . geokkjer/lsp-mode-setup)
           (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-keymap-prefix "C-c l"))

  ;; (use-package  lsp-org
  ;;    :after lsp)

#+end_src

**** lsp-ivy

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)
  
#+end_src

**** lsp-ui

lsp-ui is .. TODO

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-psition 'bottom))

  (setq lsp-ui-sidline-enable nil)
  (setq lsp-ui-sideline-show-hover nil)

#+end_src

**** lsp-treemacs

TODO: explore treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)
  
#+end_src

*** Lisp and Scheme

#+begin_src emacs-lisp

  (use-package geiser-mit
    :ensure t)
  (use-package geiser-racket
    :ensure t)
  (use-package geiser-guile
    :ensure t)

#+end_src

*** Web-mode


#+begin_src emacs-lisp

  (use-package web-mode
    :mode "\\.html\\'"
    :hook (web-mode . lsp-deferred)
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist '(("django" . "\\.html\\'"))))

  ;; Simple-httpd webserver to preview webpages
  (use-package simple-httpd
    :ensure t)
  
#+end_src

*** Typescript

Used as an example of how to 
#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*** Python

Python IDE config. Sets up python mode to trigger on .py files. Then sets up lsp-python-ms to find python-language-server on NixOS.

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3")
    :mode "\\.py\\'"
    :config
    )

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

  (use-package lsp-python-ms
    :ensure t
    :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp-deferred)))
    :init
    (setq lsp-python-ms-executable (executable-find "python-language-server")))

#+end_src

*** GO
#+begin_src emacs-lisp
  
  (use-package ob-go)
  (use-package go-mode)

  (require 'lsp-mode)
  (add-hook 'go-mode-hook #'lsp-deferred)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

#+end_src

*** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure nil
    :hook (rust-mode . (lambda ()
                         (require 'lsp-rust-server
                                  (lsp-deferred))
                         (prettify-symbols-mode)))
    :mode "\\.rs\\'")

  (setq rust-format-on-save t)

  (use-package flycheck-rust)
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))


#+end_src

*** SQL

#+begin_src emacs-lisp

  (use-package sql-indent)

#+end_src

*** nix

TODO

#+begin_src emacs-lisp

  (use-package nix-mode
    :mode "\\.nix\\'")

  (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                    :major-modes '(nix-mode)
                    :server-id 'nix))

#+end_src

*** K8s

#+begin_src emacs-lisp

  (use-package kubernetes
    :commands kubernetes-overview
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))

  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)

#+end_src

*** yaml mode
#+begin_src emacs-lisp
  
  (use-package yaml-mode)

#+end_src

** Code completion with company-mode

Company provides bette completions TODO:

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-section))
          (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-orefix-lenght 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Commenting

Useeful for commenting or uncommenting lines of code in modal editing mode.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

Really helpful

#+begin_src emacs-lisp

  ;; rainbow-delimiters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Flycheck

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs.

[[https://www.flycheck.org/][Syntax checking for GNU Emacs
]]
#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

#+end_src

** Projectile

Projectile description .TODO

#+begin_src emacs-lisp

  ;; TODO learn to use projectile
  (use-package projectile
    :diminish
    :config
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-projects-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Git and Magit

MAGIT description. TODO

#+begin_src emacs-lisp

  ;; TODO learn git and Magit
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-same-window-except-diff-v1))

  ;; TODO config for service
  (use-package forge
    :after magit)

#+end_src

** Helpful and general

#+begin_src emacs-lisp
 
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package general
    :after evil
    :config
    (general-create-definer geokkjer/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (geokkjer/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

** Evil-mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h")
      'evil-delete-backeard-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

** Hydra


#+begin_src emacs-lisp

  (use-package hydra
    :defer t)
  
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (geokkjer/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** term-mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash")
    ;; (setq explicit-zsh-args '())
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

TODO
I used the package from NixOS repository rather than compile from source.

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-vterm"

#+end_src

#+begin_src emacs-lisp


  (use-package vterm
    :ensure t
    :commands vterm
    :config
    (setq vterm-shell "bash")
    (setq vterm-max-scrollback 10000))

#+end_src

** eshell

builtin shell written for emacs TODO:completions

#+begin_src emacs-lisp

  (defun geokkjer/configure-eshell ()
    ;; Make eshell svae history when it is open  
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . geokkjer/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim" "glances")))

    (eshell-git-prompt-use-theme 'powerline))

#+end_src

** Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :after dired)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :after dired
    :config
    (setq dired-open-exstensions '(("png" . "feh")
                                   ("mkv" . "mpv"))))
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

** Other Applications examples

Using emacs org-mode to configure other applications.

*** Some app

#+begin_src conf-unix :tangle .config/some-app :mkdirp yes
      (+ 42 42)
#+end_src

** Runtime performance
#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold
  (setq gc-cons-threshold (* 2 1000 1000))
  
#+end_src


* NixOS - Laptop

This is the configuration for NixOs on my laptop
** hardware-configuration.nix

#+begin_src nix :tangle ~/configs/hardware-configuration.nix :mkdirp yes
  
  # Do not modify this file!  It was generated by ‘~/dotfiles/systems/laptop.org’
  # and may be overwritten by future invocations.
  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =
      [ (modulesPath + "/installer/scan/not-detected.nix")
      ];

    boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" ];
    boot.initrd.kernelModules = [ ];
    boot.kernelModules = [ "kvm-amd" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" =
      { device = "/dev/disk/by-uuid/f425969c-9df5-4a3f-927e-b524a3d007d7";
        fsType = "xfs";
      };

    fileSystems."/boot/efi" =
      { device = "/dev/disk/by-uuid/EC44-1BA0";
        fsType = "vfat";
      };

    swapDevices = [ ];
    networking.useDHCP = lib.mkDefault true;
    # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }

#+end_src

** configuration.nix

#+begin_src nix :tangle ~/configs/configuration.nix :mkdirp yes
  { config, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
        ./hardware-configuration.nix
        #../users/geir.nix
      ];

    # Bootloader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.loader.efi.efiSysMountPoint = "/boot/efi";
    boot.kernelPackages = pkgs.linuxPackages_latest;
    zramSwap = {
      enable = true;
      algorithm = "zstd";
    };

    networking.hostName = "the-laptop"; # Define your hostname.

    # Enable networking
    networking.networkmanager.enable = true;

    # Set your time zone.
    time.timeZone = "Europe/Oslo";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_US.UTF-8";

    # Enable the X11 windowing system.
    services.xserver.enable = true;

    # Enable the GNOME Desktop Environment.
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;

    # Enable Sway compositor
    # programs.sway.enable = true;

    # Configure keymap in X11
    services.xserver = {
      layout = "no";
      xkbVariant = "";
    };

    # Configure console keymap
    console.keyMap = "no";

    # Enable CUPS to print documents.
    services.printing.enable = true;

    # Enable sound with pipewire.
    sound.enable = true;
    hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
    };


    # User account.
    environment.localBinInPath = true;
    programs.fish.enable = true;
    users.users.geir = {
      isNormalUser = true;
      description = "Geir Okkenhaug Jerstad";
      extraGroups = [ "networkmanager" "wheel" ];
      shell = pkgs.fish;
      packages = with pkgs; [
        # Browsers
        firefox google-chrome nyxt
        # Fonts
        fira-code fira-mono fira-code-symbols meslo-lgs-nf
        # Gnome
        gnome.gnome-tweaks
        arc-icon-theme beauty-line-icon-theme
        # tools
        htop glances
        # shells & terminals
        alacritty
        starship
        nushell
        fishPlugins.done
        fishPlugins.fzf-fish 
        fishPlugins.forgit
        fishPlugins.hydro
        fzf
        # Virtualisation
        virt-manager
        qemu
        # Emacs
        emacsPackages.vterm
        libvterm libtool
        # Coding
        guile
        python3Full
        go gotools
        rustup
        # language servers
        rnix-lsp
        gopls
        luajitPackages.lua-lsp
        nodePackages.bash-language-server
        vimPlugins.cmp-nvim-lsp
        # building software
        cmake
        gcc
        bintools
        gnutar
        sccache
        # Remote desktop
        remmina
        # DevSecOps
        kubectl
      ];

    };

    nixpkgs.config.permittedInsecurePackages = [
      "python-2.7.18.6"
      "python3.10-certifi-2022.9.24"
    ];

    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
       neovim emacs git
       wget curl screen
       neofetch inxi mlocate     
    ];

    # Turn on some experimental features for nix

    nix.settings.experimental-features = [ "nix-command" "flakes" ];
    # Enable the OpenSSH daemon.
    services.openssh.enable = true;

    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;
    system.stateVersion = "22.11";

  } 

#+end_src

