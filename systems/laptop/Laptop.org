#+title: The Laptop - NixOS configuration
#+EXPORT_FILE_NAME: README.org

* Welcome stranger!

This is part of my current and ever evolving effort to configure my systems and the software that run on them. Right now it is single page and long document, part of the plan is to modularize theese documents for code reuse and my mental health.

It is written in Emacs as an Org Mode document. Emacs is at the center of this effort with git in a supporting role. Which means that the org-mode files are the source of truth.
From the org-mode files we configure the rest of the system. I will add some bootstrap information in each of the files. It is mostly the same approach on all systems.
install minimal NixOS following install follow the repective manuals -> clone git ->configure emacs -> configure systems -> reboot.


#+begin_src shell
  ln -s ~/dotfiles/out /etc/nixos/
#+end_src

*NOTE:* Inspired by [[https://github.com/daviwil/emacs-from-scratch/][Emacs from scratch by System Crafters]]

* Tips

tangle this document with C-c C-v t then change ownership and symlink out folder to /etc/nixos/

* App Configs

Here are some configs for other software I use .

** Sway
*** nixos
#+begin_src nix :tangle ~/configs/sway.nix
   { config, pkgs, lib, ... }:
   let
     # bash script to let dbus know about important env variables and
     # propagate them to relevent services run at the end of sway config
     # see
     # https://github.com/emersion/xdg-desktop-portal-wlr/wiki/"It-doesn't-work"-Troubleshooting-Checklist
     # note: this is pretty much the same as  /etc/sway/config.d/nixos.conf but also restarts  
     # some user services to make sure they have the correct environment variables
     dbus-sway-environment = pkgs.writeTextFile {
       name = "dbus-sway-environment";
       destination = "/bin/dbus-sway-environment";
       executable = true;
       text = ''
         dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_C  URRENT_DESKTOP=sway
         systemctl --user stop pipewire pipewire-media-session xdg-desktop-portal xdg-desktop-portal-wlr
         systemctl --user start pipewire pipewire-media-session xdg-desktop-portal xdg-desktop-portal-wlr
       ''; 
     };

  in
   {
     environment.systemPackages = with pkgs; [
       sway
       dbus-sway-environment
       wayland
       xdg-utils # for opening default programs when clicking links
       glib # gsettings
       dracula-theme # gtk theme
       swaylock
       swayidle
       grim # screenshot functionality
       slurp # screenshot functionality
       wl-clipboard # wl-copy and wl-paste for copy/paste from stdin / stdout
       bemenu # wayland clone of dmenu
       mako # notification system developed by swaywm maintainer
       waybar
       gammastep
     ];

     # xdg-desktop-portal works by exposing a series of D-Bus interfaces
     # known as portals under a well-known name
     # (org.freedesktop.portal.Desktop) and object path
     # (/org/freedesktop/portal/desktop).
     # The portal interfaces include APIs for file access, opening URIs,
     # printing and others.
     services.dbus.enable = true;

     # enable sway window manager
     programs.sway = {
       enable = true;
       wrapperFeatures.gtk = true;
     };
   }
#+end_src

*** Sway
Sway Window Manager
#+begin_src conf-unix :tangle ~/.config/sway/config :mkdirp yes

    ### Variables
    #
    # Logo key. Use Mod1 for Alt.
    set $mod Mod4
    # Home row direction keys, like vim
    set $left h
    set $down j
    set $up k
    set $right l
    # Your preferred terminal emulator
    set $term alacritty

    set $menu bemenu-run
    # Set gnome stuff
    set $gnome-schema org.gnome.desktop.interface
    ### Output configuration

    #
    # Default wallpaper (more resolutions are available in /run/current-system/sw/share/backgrounds/sway/)
    output * bg /home/geir/Pictures/nord-rainbow-dark-nix.png fill
    #
    # Example configuration:
    #
    #   output HDMI-A-1 resolution 1920x1080 position 1920,0
    #
    # You can get the names of your outputs by running: swaymsg -t get_outputs

    ### Idle configuration
    #
    # Example configuration:
    #
    # exec swayidle -w \
    #          timeout 300 'swaylock -f -c 000000' \
    #          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
    #          before-sleep 'swaylock -f -c 000000'
    #
    # This will lock your screen after 300 seconds of inactivity, then turn off
    # your displays after another 300 seconds, and turn your screens back on when
    # resumed. It will also lock your screen before your computer goes to sleep.

    ### Input configuration
    #
    # Example configuration:
    #
  input "1739:52781:MSFT0001:00_06CB:CE2D_Touchpad" {
         dwt enabled
         tap enabled
         natural_scroll enabled
         middle_emulation enabled
       }
    #
    # You can get the names of your inputs by running: swaymsg -t get_inputs
    # Read `man 5 sway-input` for more information about
    # or input <identifier>
  input "type:keyboard" {
    xkb_layout no
    xkb_variant ,nodeadkeys
    xkb_options caps:ctrl_modifier
  }
    # screenshots
    bindsym $mod+c exec grim  -g "$(slurp)" /tmp/$(date +'%H:%M:%S.png') 
    ### Key bindings
    #
    # Basics:
    #
    # Start a terminal

    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
    #
    # Moving around:
    #
        # Move your focus around
        bindsym $mod+$left focus left
        bindsym $mod+$down focus down
        bindsym $mod+$up focus up
        bindsym $mod+$right focus right
        # Or use $mod+[up|down|left|right]
        bindsym $mod+Left focus left
        bindsym $mod+Down focus down
        bindsym $mod+Up focus up
        bindsym $mod+Right focus right

        # Move the focused window with the same, but add Shift
        bindsym $mod+Shift+$left move left
        bindsym $mod+Shift+$down move down
        bindsym $mod+Shift+$up move up
        bindsym $mod+Shift+$right move right
        # Ditto, with arrow keys
        bindsym $mod+Shift+Left move left
        bindsym $mod+Shift+Down move down
        bindsym $mod+Shift+Up move up
        bindsym $mod+Shift+Right move right
    #
    # Workspaces:
    #
        # Switch to workspace
        bindsym $mod+1 workspace number 1
        bindsym $mod+2 workspace number 2
        bindsym $mod+3 workspace number 3
        bindsym $mod+4 workspace number 4
        bindsym $mod+5 workspace number 5
        bindsym $mod+6 workspace number 6
        bindsym $mod+7 workspace number 7
        bindsym $mod+8 workspace number 8
        bindsym $mod+9 workspace number 9
        bindsym $mod+0 workspace number 10
        # Move focused container to workspace
        bindsym $mod+Shift+1 move container to workspace number 1
        bindsym $mod+Shift+2 move container to workspace number 2
        bindsym $mod+Shift+3 move container to workspace number 3
        bindsym $mod+Shift+4 move container to workspace number 4
        bindsym $mod+Shift+5 move container to workspace number 5
        bindsym $mod+Shift+6 move container to workspace number 6
        bindsym $mod+Shift+7 move container to workspace number 7
        bindsym $mod+Shift+8 move container to workspace number 8
        bindsym $mod+Shift+9 move container to workspace number 9
        bindsym $mod+Shift+0 move container to workspace number 10

    #
    # Layout stuff:
    #
        # You can "split" the current object of your focus with
        # $mod+b or $mod+v, for horizontal and vertical splits
        # respectively.
        bindsym $mod+b splith
        bindsym $mod+v splitv

        # Switch the current container between different layout styles
        bindsym $mod+s layout stacking
        bindsym $mod+w layout tabbed
        bindsym $mod+e layout toggle split

        # Make the current focus fullscreen
        bindsym $mod+f fullscreen

        # Toggle the current focus between tiling and floating mode
        bindsym $mod+Shift+space floating toggle

        # Swap focus between the tiling area and the floating area
        bindsym $mod+space focus mode_toggle

        # Move focus to the parent container
        bindsym $mod+a focus parent
    #
    # Scratchpad:
    #
        # Sway has a "scratchpad", which is a bag of holding for windows.
        # You can send windows there and get them back later.

        # Move the currently focused window to the scratchpad
        bindsym $mod+Shift+minus move scratchpad

        # Show the next scratchpad window or hide the focused scratchpad window.
        # If there are multiple scratchpad windows, this command cycles through them.
        bindsym $mod+minus scratchpad show
    #
    # Resizing containers:
    #
    mode "resize" {
        # left will shrink the containers width
        # right will grow the containers width
        # up will shrink the containers height
        # down will grow the containers height
        bindsym $left resize shrink width 10px
        bindsym $down resize grow height 10px
        bindsym $up resize shrink height 10px
        bindsym $right resize grow width 10px

        # Ditto, with arrow keys
        bindsym Left resize shrink width 10px
        bindsym Down resize grow height 10px
        bindsym Up resize shrink height 10px
        bindsym Right resize grow width 10px

        # Return to default mode
        bindsym Return mode "default"
        bindsym Escape mode "default"
    }
    bindsym $mod+r mode "resize"

    #
    # Status Bar:
    #
  bar {
     swaybar_command waybar 
  } 

  include /etc/sway/config.d/*
  exec dbus-sway-environment
  exec configure-gtk
  exec gammastep
       
#+end_src

*** Waybar
#+begin_src conf-unix  :mkdirp yes
#+end_src

*** gammastep

#+begin_src conf-unix :tangle ~/.config/gammastep/config.ini :mkdirp yes

  ; Global settings
  [general]
  ; Set the day and night screen temperatures
  temp-day=5700
  temp-night=3500

  ; Disable the smooth fade between temperatures when Redshift starts and stops.
  ; 0 will cause an immediate change between screen temperatures.
  ; 1 will gradually apply the new screen temperature over a couple of seconds.
  fade=1

  ; Solar elevation thresholds.
  ; By default, Redshift will use the current elevation of the sun to determine
  ; whether it is daytime, night or in transition (dawn/dusk). When the sun is
  ; above the degrees specified with elevation-high it is considered daytime and
  ; below elevation-low it is considered night.
  ;elevation-high=3
  ;elevation-low=-6

  ; Custom dawn/dusk intervals.
  ; Instead of using the solar elevation, the time intervals of dawn and dusk
  ; can be specified manually. The times must be specified as HH:MM in 24-hour
  ; format.
  dawn-time=8:00-9:45
  dusk-time=19:35-20:15

  ; Set the screen brightness. Default is 1.0.
  ;brightness=0.9
  ; It is also possible to use different settings for day and night
  ; since version 1.8.
  ;brightness-day=0.7
  ;brightness-night=0.4
  ; Set the screen gamma (for all colors, or each color channel
  ; individually)
  gamma=0.8
  ;gamma=0.8:0.7:0.8
  ; This can also be set individually for day and night since
  ; version 1.10.
  ;gamma-day=0.8:0.7:0.8
  ;gamma-night=0.6

  ; Set the location-provider: 'geoclue2', 'manual'.
  ; The location provider settings are in a different section.
  location-provider=manual

  ; Set the adjustment-method: 'randr', 'vidmode', 'drm', 'wayland'.
  ; 'randr' is the preferred X11 method, 'vidmode' is an older API
  ; that works in some cases when 'randr' does not.
  ; The adjustment method settings are in a different section.
  adjustment-method=wayland

  ; Configuration of the location-provider:
  ; type 'gammastep -l PROVIDER:help' to see the settings.
  ; ex: 'gammastep -l manual:help'
  ; Keep in mind that longitudes west of Greenwich (e.g. the Americas)
  ; are negative numbers.
  [manual]
  lat=58.1
  lon=7.9
          
  ; Configuration of the adjustment-method
  ; type 'gammastep -m METHOD:help' to see the settings.
  ; ex: 'gammastep -m randr:help'
  ; In this example, randr is configured to adjust only screen 0.
  ; Note that the numbering starts from 0, so this is actually the first screen.
  ; If this option is not specified, Redshift will try to adjust _all_ screens.
  [randr]
  screen=0

#+end_src

** Alacritty

#+begin_src yaml :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
  font:
    normal:
      family: MesloLGS NF
      style: Regular
    bold:
      family:  MesloLGS NF
      style: Bold

    italic:
      family:  MesloLGS NF
      style: Italic

    bold_italic:
      family:  MesloLGS NF
      style: Bold Italic

    size: 14

  import:
    - ~/.config/alacritty/dracula.yml

#+end_src

#+begin_src conf-unix :tangle ~/.config/alacritty/dracula.yml :mkdirp yes
# Colors (Dracula)
colors:
  # Default colors
  primary:
    background: '0x282a36'
    foreground: '0xf8f8f2'
 
  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xff5555'
    green:   '0x50fa7b'
    yellow:  '0xf1fa8c'
    blue:    '0xbd93f9'
    magenta: '0xff79c6'
    cyan:    '0x8be9fd'
    white:   '0xbbbbbb'
 
  # Bright colors
  bright:
    black:   '0x555555'
    red:     '0xff5555'
    green:   '0x50fa7b'
    yellow:  '0xf1fa8c'
    blue:    '0xcaa9fa'
    magenta: '0xff79c6'
    cyan:    '0x8be9fd'
    white:   '0xffffff'

#+end_src

** Bash

#+begin_src conf-unix :tangle ~/.bashrc
   eval "$(starship init bash)"
#+end_src

** Zsh

#+begin_src nix :tangle ~/configs/zsh.nix :mkdirp yes
  { config, pkgs, ... }:
  {
    environment.systemPackages = with pkgs;
      [
        zsh
        zsh-completions
        nix-zsh-completions
      ];

    programs.zsh.enable = true;
    programs.zsh.syntaxHighlighting.enable = true;
    programs.zsh.autosuggestions.enable = true;
    programs.zsh.interactiveShellInit = ''
    eval "$(starship init zsh)"
    '';
  }

#+end_src

** Starship

#+begin_src conf-unix :tangle ~/.config/starship.toml :mkdirp yes

  # Editor completions based on the config schema
  "$schema" = 'https://starship.rs/config-schema.json'

  # Use custom format
  format = '''(bold purple)$all '''

  # Inserts a blank line between shell prompts
  add_newline = true

  [aws]
  style = "bold #ffb86c"

  [character]
  error_symbol = "[λ](bold #ff5555)"
  success_symbol = "[λ](bold #50fa7b)" # ❄

  [cmd_duration]
  style = "bold #f1fa8c"

  [directory]
  style = "bold #50fa7b"

  [git_branch]
  style = "bold #ff79c6"

  [git_status]
  style = "bold #ff5555"

  [hostname]
  style = "bold #bd93f9"

  [username]
  format = "[$user]($style) on "
  style_user = "bold #8be9fd"

#+end_src

** LazyVim

Install LazyVim

#+begin_src shell
  
  mv ~/.config/nvim ~/.config/nvim.bak
  git clone https://github.com/LazyVim/starter ~/.config/nvim
  rm -rf ~/.config/nvim/.git
#+end_src

* NixOS - Laptop

This is the configuration for NixOs on my laptop

** bootstrap

backup org conf and remove other files from /etc/nixos
As root or sudo

#+begin_src shell

  ln -s ~/configs /etc/nixos

#+end_src

** hardware-configuration.nix

#+begin_src nix :tangle ~/configs/hardware-configuration.nix :mkdirp yes
  
  # Do not modify this file!  It was generated by ‘~/dotfiles/systems/laptop.org’
  # and may be overwritten by future invocations.
  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =
      [ (modulesPath + "/installer/scan/not-detected.nix")
      ];

    boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" ];
    boot.initrd.kernelModules = [ ];
    boot.kernelModules = [ "kvm-amd" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" =
      { device = "/dev/disk/by-uuid/f425969c-9df5-4a3f-927e-b524a3d007d7";
        fsType = "xfs";
      };

    fileSystems."/boot/efi" =
      { device = "/dev/disk/by-uuid/EC44-1BA0";
        fsType = "vfat";
      };

    swapDevices = [ ];
    networking.useDHCP = lib.mkDefault true;
    # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }

#+end_src

** configuration.nix

#+begin_src nix :tangle ~/configs/configuration.nix :mkdirp yes
  { config, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
        ./hardware-configuration.nix
        ./zsh.nix
        ./sway.nix
        ./tty.nix
        ./aliases.nix
      ];

    # Bootloader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.loader.efi.efiSysMountPoint = "/boot/efi";
    boot.kernelPackages = pkgs.linuxPackages_latest;
    zramSwap = {
      enable = true;
      algorithm = "zstd";
    };
    services.fwupd.enable = true;

    networking.hostName = "the-laptop"; # Define your hostname.

    # Enable networking
    networking.networkmanager.enable = true;

    # Set your time zone.
    time.timeZone = "Europe/Oslo";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_US.UTF-8";

    # Enable the X11 windowing system.
    services.xserver.enable = true;

    # Enable the GNOME Desktop Environment.
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;

    # Enable Sway compositor
    # programs.sway.enable = true;

    # Configure keymap in X11
    services.xserver = {
      layout = "no";
      xkbVariant = "";
    };

    # Configure console keymap
    console.keyMap = "no";

    # Enable CUPS to print documents.
    services.printing.enable = false;

    # Enable sound with pipewire.
    sound.enable = true;
    hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
    };


    # User account.
    environment.localBinInPath = true;
    programs.fish.enable = true;
    programs.zsh.enable = true;
    users.users.geir = {
      isNormalUser = true;
      description = "Geir Okkenhaug Jerstad";
      extraGroups = [ "networkmanager" "wheel" ];
      shell = pkgs.zsh;
      packages = with pkgs; [
        # Browsers
        firefox google-chrome nyxt
        # Fonts
        fira-code fira-mono fira-code-symbols meslo-lgs-nf
        # Gnome
        gnome.gnome-tweaks
        arc-icon-theme beauty-line-icon-theme
        # Monitoring tools
        htop glances zenith bottom fwupd
        # shells & terminals
        alacritty
        starship
        nushell
        fishPlugins.done
        fishPlugins.fzf-fish 
        fishPlugins.forgit
        fishPlugins.hydro
        fzf
        # Virtualisation
        virt-manager
        qemu
        # Emacs
        emacsPackages.vterm
        libvterm libtool
        # Coding
        guile
        python3Full
        go gotools
        rustup
        # language servers
        rnix-lsp
        gopls
        luajitPackages.lua-lsp
        nodePackages.bash-language-server
        vimPlugins.cmp-nvim-lsp
        # building software
        cmake
        gcc
        bintools
        gnutar
        sccache
        # Remote desktop
        remmina
        # DevSecOps
        kubectl
      ];

    };

    nixpkgs.config.permittedInsecurePackages = [
      "python-2.7.18.6"
      "python3.10-certifi-2022.9.24"
    ];

    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
       neovim emacs git
       wget curl screen
       neofetch inxi mlocate     
    ];

    # Turn on some experimental features for nix

    nix.settings.experimental-features = [ "nix-command" "flakes" ];
    # Enable the OpenSSH daemon.
    services.openssh.enable = true;

    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;
    system.stateVersion = "22.11";

  } 

#+end_src

** Nix services and configs
*** tty with colors
#+begin_src nix :tangle ~/configs/tty.nix :mkdirp yes
{ pkgs, ... }:
{
  services.getty.greetingLine = ''\l'';

  console = {
    earlySetup = true;

    # Joker palette
    colors = [
      "1b161f"
      "ff5555"
      "54c6b5"
      "d5aa2a"
      "bd93f9"
      "ff79c6"
      "8be9fd"
      "bfbfbf"

      "1b161f"
      "ff6e67"
      "5af78e"
      "ffce50"
      "caa9fa"
      "ff92d0"
      "9aedfe"
      "e6e6e6"
    ];
  };
}

#+end_src

*** Aliases and apps
#+begin_src nix :tangle ~/configs/aliases.nix :mkdirp yes
  { config, pkgs, ... }:
  {
    environment.systemPackages = with pkgs; [
      tldr
      exa
      bat
      ripgrep
    ];
    environment.shellAliases = {
      h = "tldr";
      # oxidized
      ls = "exa -l";
      cat = "bat";
      grep = "rg";
      top = "btm --color gruvbox";
      # some tools
      st = "curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -";
    };
  }
#+end_src
