#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+EXPORT_FILE_NAME: README.org
#+INCLUDE "../common/startup.org"

* Welcome stranger!

This is part of my current and ever evolving effort to configure my systems and the software that run on them. Right now it is single page and long document, part of the plan is to modularize theese documents for code reuse and my mental health.

It is written in Emacs as an Org Mode document. Emacs is at the center of this effort with git in a supporting role. Which means that the org-mode files are the source of truth.
From the org-mode files we configure the rest of the system. I will add some bootstrap information in each of the files. It is mostly the same approach on all systems.
install minimal NixOS or GNU Guix systems following install follow the repective manuals -> clone git ->configure emacs -> configure systems -> reboot.

The [[file:init.el][init.el]], [[file:][README.org]] and different config files are generated from this file.

*NOTE:* symlink your init.el file to ~/.emacs.d/init.el

#+begin_src shell
  ln -s ~/systems/laptop/init.el ~/emacs.d/init.el
#+end_src

This one is used to configure mt laptop.
My laptop runs GNU Guix with Gnome and exwm as window managers.

*NOTE:* Inspired by [[https://github.com/daviwil/emacs-from-scratch/][Emacs from scratch by System Crafters]]

* Bootstrap

Boostrapping my systems involves installing NixOs in a predictable way so that configuring them is jus git clone -> symlink -> rebuild -> reboot -> apply Emacs config. TODO how to handle secrets(ssh-keys and gpg keys)

#+begin_src shell 
  
#+end_src

* Tips

Here there will be some comments on hoe to use this file

* Emacs startup performance

** Make Emacs print out the time it used to start up.

#+begin_src emacs-lisp

  (defun geokkjer/display-startup-time ()
    (message "Emacs loaded in %s with %d grabage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'geokkjer/display-startup-time)

#+end_src

** Garbage collection

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 50 1000 1000))
  
#+end_src

* UI config

Setting up the emacs ui to my liking.

** Basic

Turn off the startup-message makes emcas launch into the scratch buffer.
Turn off some UI elements, like scroll-bar and menu-bar.
And turn off the bell to visual, no audible bell.

#+begin_src emacs-lisp

  ;; Turns off the startup-message
  (setq inhibit-startup-message t)

  ;; Disable UI-elements
  (scroll-bar-mode -1)  ; Disable visible scrollbar
  (tool-bar-mode -1)    ; Disable the toolbar
  (tooltip-mode -1)     ; Disable tooltips
  (set-fringe-mode 10)  ; Give us some breathing room

  (menu-bar-mode -1)    ; Disable the menu bar

  ;; Set up the visual bell
  (setq visible-bell t)

  ;; Setting to auto reload files
  (setq auto-revert-mode t)

#+end_src

** Doom modline and all-the-icons

Use doom-modeline, set height. Install all-the-icons and use doom-themes to set a nice theme. Sometimes needed "M-x all-the-icons-install-fonts"

#+begin_src emacs-lisp

  ;; Doom modline, all-the-icons and doom-theme
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 15)))

  (use-package all-the-icons)

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

** Line numbers

Set emacs to show line-numbers, some modes excluded.

#+begin_src emacs-lisp

  ;; Enable line numbers
  

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  vterm-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Command Log mode

Shows key commands in a pane. :commands ensures that the package is loade when the command is invoked and not before.

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)
  
#+end_src

* Font configuration

I like the MesloLGS Nerd and the Fira Code fonts, it fits nicely with the theme and my zsh prompt.

#+begin_src emacs-lisp
  
  (defvar geokkjer/default-font-size 140)

  (set-face-attribute 'default nil :font "Fira Code" :height geokkjer/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 140)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "MesloLGS NF" :height 130 :weight 'regular)

#+end_src

* Package System setup

Setting up some packaging registers for emacs.

** Package sources and initialization.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  ;; Set the repos
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package in case we are on non-Linux platform
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Auto-update packages

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

** Keep the folders clean

This is where I will put some things to keep my .emacs.d folder clean

#+begin_src emacs-lisp

;;  (use-package no-littering)
  
;;  (setq auto-save-file-name-transforms
;;        '((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Swiper and Ivy

Install and setup Ivy and swiper. Some keybindings for both swiper and counsel. which-key and ivy-rich.

** Swiper

#+begin_src emacs-lisp

  (use-package swiper)


#+end_src

** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-reverse-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reversee-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

** Counsel

#+begin_src emacs-lisp

    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x b" . counsel-ibuffer)
             ("C-x C-f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-r" .'counsel-minibuffer-history))
      :config
      (setq ivy-initial-inputs-alist nil)
      (counsel-mode 1))

#+end_src

** Which key

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

  #+end_src

* Org-mode

Org-mode configuration :TODO Redo, it work but more work is needed

*** basic

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  ;; Org Mode Configuration  

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			      '(("^ *\\([-]\\) "
				 (0 (prog1 () (compose-region
					       (match-beginning1)
					       (match-end 1)
					       "•")))))))

  ;; Show overview when open
  (setq org-startup-folded t)

  ;; Set faces for heading levels
  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "MesloLGS NF" :weight 'regular
			  :height (cdr face))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit
			  '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face
							fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    (defun efs/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
	    visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . efs/org-mode-visual-fill)))

#+end_src

*** org-babel

Enable Org-babbel for emacs-lisp, shell and python. Turn on org-babel-tangle.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (require 'ob-go)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((lisp . t)
       (scheme . t)
       (emacs-lisp . t)
       (shell . t)
       (go . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (setq org-confirm-babel-evaluate nil)

  ;; This is needed as of Org 9.2
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("nx" . "src nix")))


  ;; Automaticly tangle Emacs.org on save
  (defun geokkjer/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/systems/laptop/Laptop.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'geokkjer/org-babel-tangle-config)))

  (setq org-src-tab-acts-natively t)

#+end_src

*** org-agenda

#+begin_src emacs-lisp

  ;; Org-agenda config

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files
        '("~/Projects/Code/dotfiles/emacs/OrgFiles/Tasks.org"
          "~/Projects/Code/dotfiles/emacs/OrgFiles/Birthdays.org"
          "~/Projects/Code/dotfiles/emacs/OrgFiles/Habits.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
      '((:startgroup)
        ;; Put mutually exclusive tags here
        (:endgroup)
        ("@errand" . ?E)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("planning" . ?p)
        ("publish" . ?P)
        ("batch" . ?b)
        ("note" . ?n)
        ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active
  Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
          ((org-agenda-overriding-header "Low Effort Tasks")
           (org-agenda-max-todos 20)
           (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))


  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp
                              "~/Projects/Code/dotfiles/emacs/OrgFiles/Tasks.org"
                              "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree
            "~/Projects/Code/dotfiles/emacs/OrgFiles/Journal.org")
          "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
          ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
          :clock-in :clock-resume
          :empty-lines 1)
          ("jm" "Meeting" entry
           (file+olp+datetree
            "~/Projects/Code/dotfiles/emacs/OrgFiles/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
          :clock-in :clock-resume
          :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry (file+olp+date
                                        "~/Projects/Code/dotfiles/emacs/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines
           1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline
                                      "~/Projects/Code/dotfiles/emacs/OrgFiles/Metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (efs/org-font-setup)
  
#+end_src

* Development

Making Emacs have the functionality of an IDE. And other things that are related to development.

** Languages and lsp-mode configuration

Configuration for different programming languages that I use, or want to learn.

*** lsp-mode

lsp-mode is a mode TODO:

**** lsp-basic

lsp-mode basic configuration including automatic headerline in lsp-mod . description. TODO

#+begin_src emacs-lisp

  (defun geokkjer/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . geokkjer/lsp-mode-setup)
           (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-keymap-prefix "C-c l"))

  (use-package  lsp-org
    :after lsp)
   
#+end_src

**** lsp-ivy

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)
  
#+end_src

**** lsp-ui

lsp-ui is .. TODO

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-psition 'bottom))

  (setq lsp-ui-sidline-enable nil)
  (setq lsp-ui-sideline-show-hover nil)

#+end_src

**** lsp-treemacs

TODO: explore treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)
  
#+end_src

*** Lisp and Scheme

#+begin_src emacs-lisp

  (use-package geiser-mit
    :ensure t)
  (use-package geiser-racket
    :ensure t)
  (use-package geiser-guile
    :ensure t)

#+end_src

*** Web-mode


#+begin_src emacs-lisp

  (use-package web-mode
    :mode "\\.html\\'"
    :hook (web-mode . lsp-deferred)
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist '(("django" . "\\.html\\'"))))

  ;; Simple-httpd webserver to preview webpages
  (use-package simple-httpd
    :ensure t)
  
#+end_src

*** Typescript

Used as an example of how to 
#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*** Python

Python IDE config. Sets up python mode to trigger on .py files. Then sets up lsp-python-ms to find python-language-server on NixOS.

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3")
    :mode "\\.py\\'"
    :config
    )

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

  (use-package lsp-python-ms
    :ensure t
    :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp-deferred)))
    :init
    (setq lsp-python-ms-executable (executable-find "python-language-server")))

#+end_src

*** GO
#+begin_src emacs-lisp
  
  (use-package ob-go)
  (use-package go-mode)

  (require 'lsp-mode)
  (add-hook 'go-mode-hook #'lsp-deferred)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

#+end_src

*** Rust

#+begin_src emacs-lisp

#+end_src

*** SQL

#+begin_src emacs-lisp

  (use-package sql-indent)

#+end_src

*** nix

TODO

#+begin_src emacs-lisp

  (use-package nix-mode
    :mode "\\.nix\\'")

  (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                    :major-modes '(nix-mode)
                    :server-id 'nix))

#+end_src

*** K8s

#+begin_src emacs-lisp

  (use-package kubernetes
    :commands kubernetes-overview
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))

  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)

#+end_src

*** yaml mode
#+begin_src emacs-lisp
  
  (use-package yaml-mode)

#+end_src

** Code completion with company-mode

Company provides bette completions TODO:

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-section))
          (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-orefix-lenght 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Commenting

Useeful for commenting or uncommenting lines of code in modal editing mode.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

Really helpful

#+begin_src emacs-lisp

  ;; rainbow-delimiters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Flycheck

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs.

[[https://www.flycheck.org/][Syntax checking for GNU Emacs
]]
#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

#+end_src

** Projectile

Projectile description .TODO

#+begin_src emacs-lisp

  ;; TODO learn to use projectile
  (use-package projectile
    :diminish
    :config
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-projects-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Git and Magit

MAGIT description. TODO

#+begin_src emacs-lisp

  ;; TODO learn git and Magit
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-same-window-except-diff-v1))

  ;; TODO config for service
  (use-package forge
    :after magit)

#+end_src

* Helpful and general

#+begin_src emacs-lisp
 
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package general
    :after evil
    :config
    (general-create-definer geokkjer/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (geokkjer/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

* Evil-mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h")
      'evil-delete-backeard-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* GUIX

#+begin_src emacs-lisp

  (use-package guix)

#+end_src

* Hydra


#+begin_src emacs-lisp

  (use-package hydra
    :defer t)
  
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (geokkjer/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Shells and Terminals

** term-mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash")
    ;; (setq explicit-zsh-args '())
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

TODO
I used the package from NixOS repository rather than compile from source.

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-vterm"

#+end_src

#+begin_src emacs-lisp


  (use-package vterm
    :ensure t
    :commands vterm
    :config
    (setq vterm-shell "bash")
    (setq vterm-max-scrollback 10000))

#+end_src

** eshell

built in shell written for emacs TODO:completions

#+begin_src emacs-lisp

  (defun geokkjer/configure-eshell ()
    ;; Make eshell svae history when it is open  
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . geokkjer/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim" "glances")))

    (eshell-git-prompt-use-theme 'powerline))

#+end_src

* File Management

** Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :after dired)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :after dired
    :config
    (setq dired-open-exstensions '(("png" . "feh")
                                   ("mkv" . "mpv"))))
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Window Managers
** ix3
** EXVM

EXVM is Emacs as a Window Manager

*** Write the Desktop file and link it on non nixos/guix systems

NOTE: For installation on traditional Linux distros like Ubuntu:

#+begin_src conf-unix :tangle ~/dotfiles/exwm/exwm.desktop
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=sh /home/geir/dotfiles/emacs/exvm/start-exwm.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=exwm
DesktopNames=exwm
#+end_src

#+begin_src shell :dir "/sudo::"
 sudo ln -f ~/dotfiles/exwm/exwm.desktop  /usr/share/xsessions/exwm.desktop 
#+end_src

#+begin_src shell :tangle ~/dotfiles/exwm/start-exwm.sh
  #!/bin/sh  

  # start EXWM --mm maximize emacs --debug-init drop into debugger
  
  exec dbus-launch --exit-with-session emacs -mm --debug-init

#+end_src

NOTE: On GNU Guix add "emacs-exwm" "emacs-desktop-environmet" to your config.scm
NOTE: TODO NixOS

*** Configuration

NOTE: remember to install Xmodmap on your distro

Configure CapsLock to act as CTRL

#+begin_src conf-unix :tangle ~/dotfiles/exwm/Xmodmap

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R
  
#+end_src

Use arandr to get screenresolution(s), usually saves to .screenlayout/yourfile

Use xrandr to set screenresolution(s), copy the xrandr line from the file and paste it into the "start-process-shell-command "xrandr" nil" expression below. 

This is a basic configuration for EXWM

#+begin_src emacs-lisp

  (defun geokkjer/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'geokkjer/exwm-update-class)

    ;; Rebind CapsLock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/dofiles/exwm/Xmodmap")

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    (require 'exwm-randr)
    (exwm-randr-enable)
    (start-process-shell-command "xrandr" nil "xrandr --output eDP --primary --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-A-0 --off")

    ;; Load the system tray before exwm-init
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-'] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-enable))

#+end_src

** StumpWM
** Xmonad
** Sway
* Other Applications examples

Using emacs org-mode to configure other applications.

*** Some app

#+begin_src conf-unix :tangle .config/some-app :mkdirp yes
      (+ 42 42)
#+end_src

* Runtime performance
#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold
  (setq gc-cons-threshold (* 2 1000 1000))
  
#+end_src
