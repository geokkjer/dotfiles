#+TITLE: Server 1
#+EXPORT_FILE_NAME: README.org

* Nixos

#+begin_src shell
  # remove config files
  sudo rm /etc/nixos/configuration.nix
  sudo rm /etc/nixos/hardware-configuration.nix
  # tangle this document
  # symlink from local folder to config folder
  sudo ln -s /home/geir/server1/configuration.nix /etc/nixos/configuration.nix
#+end_src

#+begin_src shell :tangle ~/tangle.sh
  #!/bin/env bash
  emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "/home/geir/dotfiles/systems/servers/server1.org")'
#+end_src

** Hardware

#+begin_src nix :tangle ~/server1/hardware-configuration.nix :mkdirp yes
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/54b0415c-2144-49d2-8bec-6a0acb4aca88";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/40F3-774D";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

#+end_src

** System

#+begin_src nix :tangle ~/server1/configuration.nix :mkdirp yes

  { config, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
        ./hardware-configuration.nix
        ./starship.nix
      ];

    # Swap zram
    zramSwap = {
      enable = true;
      algorithm = "zstd";
    };
    # Use the GRUB 2 boot loader.
    boot.loader.grub.enable = true;
    boot.loader.grub.efiSupport = true;
    boot.loader.grub.efiInstallAsRemovable = true;
    boot.loader.efi.efiSysMountPoint = "/boot/";
    boot.loader.grub.device = "nodev"; 

    # Disks and Updates
    services.fstrim.enable = true;

    # Enable all unfree hardware support.
    hardware.firmware = with pkgs; [ firmwareLinuxNonfree ];
    hardware.enableAllFirmware = true;
    hardware.enableRedistributableFirmware = true;
    nixpkgs.config.allowUnfree = true;
    services.fwupd.enable = true;

    # Networking
    networking.hostName = "server1"; 
    networking.networkmanager.enable = true;  

    # Set your time zone.
    time.timeZone = "Europe/Oslo";


    i18n.defaultLocale = "en_US.UTF-8";
    console = {
      font = "Lat2-Terminus16";
      keyMap = "no";
    };

    users.users.geir = {
      isNormalUser = true;
      extraGroups = [ "wheel" "networkmanager" "libvirtd" ]; # Enable ‘sudo’ for the user.
      packages = with pkgs; [
          bottom
      ];
    };

    environment.systemPackages = with pkgs; [
      neovim emacs nano curl htop glances neofetch 
      wget git 
    ];

    # Services

    # Enable the OpenSSH daemon.
    services.openssh.enable = true;
    services.openssh.settings.PermitRootLogin = "no";
    services.openssh.settings.PasswordAuthentication = false; 

    # Enable Netdata
    services.netdata.enable = true;

    # Firewall
    networking.firewall.enable = true;
    networking.firewall.allowedTCPPorts = [ 22 19999 ];
    networking.firewall.allowedUDPPorts = [ 22 ];
    system.stateVersion = "23.05"; 

  }
#+end_src

** Services
*** Virtualization
**** Qemu/KVM
**** LXC/LXD
**** Podman
*** headscale
*** dyndns
*** Pi-hole
*** calibre web
*** Jellyfin

** Configs

*** Shell

Starship

#+begin_src nix :tangle ~/server1/starship.nix :mkdirp yes
  { pkgs, ... }:
  {
    environment.systemPackages = with pkgs; [
      starship
    ];
  }

#+end_src

Bash

#+begin_src conf-unix :tangle ~/.bashrc :mkdirp yes
  eval "$(starship init bash)"
  neofetch
#+end_src

Zsh

#+begin_src nix
  { pkgs, ... }:
  {
    
  }
#+end_src

#+begin_src conf-unix :tangle ~/.zshrc

#+end_src
