+TITLE: Server 1
#+EXPORT_FILE_NAME: README.org

* Nixos

#+begin_src shell
  cd /home/geir/dotfiles/systems/server1/
  # setup ssh with keys 
  scp *.nix root@server1:/etc/nixos/
#+end_src

#+begin_src shell :tangle tangle.sh
  #!/bin/env bash
  emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "/home/geir/dotfiles/systems/servers/server1.org")'
#+end_src

** Hardware

#+begin_src nix :tangle hardware-configuration.nix :mkdirp yes
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/54b0415c-2144-49d2-8bec-6a0acb4aca88";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/40F3-774D";
      fsType = "vfat";
    };

  swapDevices = [ ];

  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

#+end_src

** System

#+begin_src nix :tangle configuration.nix :mkdirp yes

  { config, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
        ./hardware-configuration.nix
        ./starship.nix
        ./podman.nix
        #./libvirt.nix
        ./jellyfin.nix
        ./tailscale.nix
        ./calibre-web.nix
        ./nextcloud.nix
      ];

    # Swap zram
    zramSwap = {
      enable = true;
      algorithm = "zstd";
    };
    # Use the GRUB 2 boot loader.
    boot.loader.grub.enable = true;
    boot.loader.grub.efiSupport = true;
    boot.loader.grub.efiInstallAsRemovable = true;
    boot.loader.efi.efiSysMountPoint = "/boot/";
    boot.loader.grub.device = "nodev"; 

    # Disks and Updates
    services.fstrim.enable = true;

    # Mount remote filesystem
    fileSystems."/mnt/remote/media" = {
      device = "192.168.1.127:/mnt/storage/media";
      fsType = "nfs";
    };

    # Enable all unfree hardware support.
    hardware.firmware = with pkgs; [ firmwareLinuxNonfree ];
    hardware.enableAllFirmware = true;
    hardware.enableRedistributableFirmware = true;
    nixpkgs.config.allowUnfree = true;
    services.fwupd.enable = true;

    # Networking
    networking.hostName = "server1"; 
    networking.networkmanager.enable = true;  

    # Set your time zone.
    time.timeZone = "Europe/Oslo";


    i18n.defaultLocale = "en_US.UTF-8";
    console = {
      font = "Lat2-Terminus16";
      keyMap = "no";
    };

    users.users.geir = {
      isNormalUser = true;
      extraGroups = [ "wheel" "networkmanager" "libvirt" "podman" ];
      packages = with pkgs; [
          bottom
      ];
    };

    environment.systemPackages = with pkgs; [
      neovim emacs nano curl htop glances neofetch 
      wget git  
    ];

    # Enable the OpenSSH daemon.
    services.openssh.enable = true;
    services.openssh.settings.PermitRootLogin = "yes";
    services.openssh.settings.PasswordAuthentication = false; 

    # Enable Netdata
    services.netdata.enable = true;

    # Firewall
    networking.firewall.enable = true;
    networking.firewall.allowedTCPPorts = [ 22 19999 ];
    networking.firewall.allowedUDPPorts = [ 22 ];
    system.stateVersion = "23.05"; 

  }
#+end_src

** Services
*** NextCloud

#+begin_src nix :tangle nextcloud.nix
  { pkgs, ... }:

  {
    #  Nextcloud Config
    environment.etc."nextcloud-admin-pass".text = "siKKerhet666";
    services.nextcloud = {
      enable = true;
      hostName = "server1.tail807ea.ts.net";

      # Ssl Let'encrypt
      #hostName = "cloud.geokkjer.eu";
      #https = true;

      # Auto-update Nextcloud Apps
      autoUpdateApps.enable = true;
      # Set what time makes sense for you
      autoUpdateApps.startAt = "05:00:00";
      # enable redis cache
      configureRedis = true;
      # Create db locally , maybe not needed with sqlite
      database.createLocally = true;
      # Config options
      config = {
        dbtype = "sqlite";
        adminpassFile = "/etc/nextcloud-admin-pass";
        extraTrustedDomains = [ "localhost" "workstation.tail807ea.ts.net" "the-laptop.tail807ea.ts.net" "*.tail807ea.ts.net" "46.226.104.98" ];
      };
    };
  }

#+end_src

*** Tailscale

#+begin_src nix :tangle tailscale.nix :mkdirp yes
  {config, pkgs, ... }:
  {
    environment.systemPackages = with pkgs; [
      tailscale
    ];

    services.tailscale.enable = true;
    networking.firewall = {
      # trace: warning: Strict reverse path filtering breaks Tailscale exit node
      # use and some subnet routing setups. Consider setting
      # `networking.firewall.checkReversePath` = 'loose'
      checkReversePath = "loose";
      trustedInterfaces = [ "tailscale0" ];
    };
  }
#+end_src

*** nginx

#+begin_src nix

#+end_src

*** Virtualization

**** Qemu/KVM

#+begin_src nix :tangle libvirt.nix :mkdirp yes
  { config, pkgs, ... }:
  {
    virtualisation.libvirtd.enable = true;
    environment.systemPackages = with pkgs; [
      qemu_kvm
      libvirtd
    ];
  }
#+end_src

**** Podman

#+begin_src nix :tangle podman.nix :mkdirp yes
  { config, pkgs, ... }:
  {
    virtualisation.podman.enable = true;
    virtualisation.podman.dockerCompat = true;
    virtualisation.podman.dockerSocket.enable = true;
    #virtualisation.defaultNetwork.settings.dns_enabled = true;
  }
#+end_src

**** LXC/LXC

#+begin_src nix

#+end_src

*** container tamplate

#+begin_src nix
  {
    virtualisation.oci-containers.backend = "podman";
    virtualisation.oci-containers.containers = {
      container-name = {
        image = "nginx";
        autoStart = true;
        ports = [ "127.0.0.1:1234:1234" ];
      };
    };
  }

  virtualisation.arion = {
    backend = "docker";
    projects = {
      "db" = settings.services."db".service = {
        image = "";
        restart = "unless-stopped";
        environment = { POSTGRESS_PASSWORD = "password"; };
      };
    };
  };
#+end_src

*** dyndns
*** Soft-Serve

ref: [[https://gist.github.com/meowgorithm/3e039e2414a6f3e01b156e574b3a6b48][Github Gist]]

#+begin_src nix :tangle soft-serve.nix :mkdirp yes

  {
    pkgs,
    modulesPAth,
    libs,
    ...
  }:
  let
    sshdPort = 8888;
    softServePort = 22;
  in {
    networking.firewall.allowedTCPPorts = [ sshdPort, softServePort ];

    environment.systemPackages = with pkgs; [
      soft-serve
    ];
    systemd.services = {
      soft-serve = {
        description = "Soft Serve";
        wantedBy = ["multi-user.target"];
        restartIfChanged = true;
        enviromant = {
          SOFT_SERVE_PORT = builtins.toString softServePort;
          SOFT_SERVE_HOST = "git.geokkjer.eu";
        };
        serviceConfig = {
          Type = "simple";
          Restart = "always";
          RestartSec = "1";
          WorkingDirectory = "/soft";
          ExecStart = ''
                    ${pkgs.soft-serve}/bin/soft serve
                    '';
        };
      };
    };
  }


#+end_src

*** Gogs

#+begin_src nix

#+end_src

*** calibre web

#+begin_src nix :tangle calibre-web.nix :mkdirp yes
  { config, pkgs, ... }:
  {
    services.calibre-web = {
      enable = true;
      #group = "media";
      listen = {
          ip = "0.0.0.0";
          port = 8083;
      };
      options = {
        calibreLibrary = "/mnt/remote/media/books/calibre/";
        enableBookUploading = true;
      };
    };
    networking.firewall.allowedTCPPorts = [ 8083 ];
  }

#+end_src

*** Jellyfin

#+begin_src nix :tangle jellyfin.nix
  { config, pkgs, ... }:
  {
    services.jellyfin.enable = true;
    networking.firewall.allowedTCPPorts = [ 8096 8920 ];
    networking.firewall.allowedUDPPorts = [ 1900 7359 ];
  }
#+end_src

** Configs

*** Shell

Starship

#+begin_src nix :tangle starship.nix :mkdirp yes
  { pkgs, ... }:
  {
    environment.systemPackages = with pkgs; [
      starship
    ];
  }

#+end_src

Bash

#+begin_src conf-unix :tangle ~/.bashrc :mkdirp yes
  eval "$(starship init bash)"
  neofetch
#+end_src

Zsh

#+begin_src nix
  { pkgs, ... }:
  {
    
  }
#+end_src

#+begin_src conf-unix :tangle ~/.zshrc

#+end_src
