#+title: The Router - NixOS configuration
#+EXPORT_FILE_NAME: README.org

* Bootstrap
Tangle this file first then C-e
#+begin_src shell
  pushd /home/geir/dotfiles/systems/router/
  chmod +x install.sh
  popd
#+end_src

#+begin_src shell :tangle install.sh
  pushd /home/geir/dotfiles/systems/router
  sudo cp *.nix /etc/nixos/
  popd
#+end_src

* Hardware

#+begin_src nix :tangle hardware-configuration.nix

  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =[ (modulesPath + "/installer/scan/not-detected.nix") ];

    boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" ];
    boot.initrd.kernelModules = [ ];
    boot.kernelModules = [ "kvm-intel" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" =
      { device = "/dev/disk/by-uuid/";
        fsType = "ext4";
      };

    fileSystems."/boot" =
      { device = "/dev/disk/by-uuid/256A-2C3F";
        fsType = "vfat";
      };

    fileSystems."/home" =
      { device = "/dev/disk/by-uuid/8c02afc3-d3a7-41d0-b5cc-43391fa4d0b3";
        fsType = "ext4";
      };

    swapDevices = [ ];

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }

#+end_src

* NixOS router

** OS

#+begin_src nix :tangle configuration.nix

#+end_src

** Networking

#+begin_src nix :tangle network.nix

  { pkgs, config, ... }:
  {
    let
      externalInterface = "enp2s0";
      internalInterface = "enp3s0";
      wifi = "wlp0";
    in  
      networking = {
        useDHCP = false;
        hostName = "router";
        nameserver = [ "192.168.1.1" "9.9.9.9" ];
        # Wired
        interfaces = {
          externalInterface = {
            useDHCP = true; # wan
          };
          internalInterface = {
            useDHCP = false; # lan
            ipv4.addresses = [{
              address = "192.168.1.1";
              prefixLength = 24;
            }];
          };
        };
        # Wifi
        # wpa_passphrase <SSID> <psk>
        wifi = {
        };
        # Bridges

      };
  }

#+end_src

* Services
** DHCP

#+begin_src nix  :tangle dhcp.nix
  { pkgs, config, ... }:
  {
    services.dhcpd4 = {
      enable = true;
      interfaces = [ "ens2" ];
      extraConfig = ''
                 option domain-name-servers 192.168.1.1, 1.1.1.1;
                 option subnet-mask 255.255.255.0;
                 subnet 192.168.1.0 netmask 255.255.255.0
                {
                 option broadcast-address 192.168.1.255;
                 option routers 192.168.1.1;
                 interface ens2;
                 range 192.168.1.128 192.168.1.254
                }
                  '';
    };
  }

#+end_src

** Unbound dns

#+begin_src nix :tangle unbound.nix
  { pkgs, config, ... }:
  {
   services.unbound = {
     enable = true;
     settings = {
       server = {
         interface = [ "127.0.0.1" "192.168.1.1" ];
         access-control =  [
           "0.0.0.0/0 refuse"
           "127.0.0.0/8 allow"
           "192.168.1.0/24 allow"
         ];
       };
     };
   };
  }
#+end_src

* Sources

[[https://francis.begyn.be/blog/nixos-home-router][Naar]]
[[https://dataswamp.org/~solene/2022-08-03-nixos-with-live-usb-router.html][Creating a NixOS live USB for a full featured APU router]]
[[https://mcwhirter.com.au/craige/blog/2019/Setting_Up_Wireless_Networking_with_NixOS/][Setting Up Wireless Networking with NixOS]]
