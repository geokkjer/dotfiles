#+title: NixOS configuration for the-sober-counsel
#+EXPORT_FILE_NAME: README.org

* Welcome/bootstrap

This is an attempt to configure NixOS from an Emacs document usidn org-babel to tangle config files

Install NixOS as you would noramlly from the iso -> run the code blocks in this file -> rebuild your system with:
#+begin_src bash 
  sudo rm /etc/nixos/configuration.nix 
  ln -sr /home/geir/.configs/configuration.nix /etc/nixos/configuration.nix
#+end_src

#+begin_src shell 
  #!/bin/sh
  chmod +x ~/.bin/install.sh
#+end_src

* NixOS - The Workstation
** Setup

Tangle this document with C-c C-v t then change ownership and symlink ~/configs dir to /etc/nixos/

#+begin_src shell
  install.sh
#+end_src

** NixOS configuration
*** Hardware

#+begin_src nix :tangle ~/configs/hardware-configuration :mkdirp yes

  # Do not modify this file!  It was generated by ‘~/dotfiles/systems/workstation.org’
  # and may be overwritten by future invocations.

  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =
      [ (modulesPath + "/installer/scan/not-detected.nix")
      ];

    boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
    boot.initrd.kernelModules = [ ];
    boot.kernelModules = [ "kvm-amd" ];
    boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/a1272477-b0ce-4b39-951b-af50784d7dd1";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/C933-0FF8";
      fsType = "vfat";
    };

  fileSystems."/home/geir/8TB_disk" =
    { device = "/dev/disk/by-uuid/03dbdfd1-9f2e-4755-8d29-32e9352ce043";
      fsType = "xfs";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  #networking.useDHCP = lib.mkDefault true;
  networking.interfaces.enp4s0.useDHCP = lib.mkDefault true;
  networking.interfaces.enp6s0.useDHCP = lib.mkDefault true;
  networking.interfaces.wlp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }

#+end_src

*** System

#+begin_src nix :tangle ~/.configs/configuration.nix :mkdirp yes
  #
  # This file is auto-generated from "workstation.org"
  #

  { config, pkgs, ... }:

  {
    imports =
      [ 
        ./hardware-configuration.nix
        ./tty.nix
        ./zsh.nix
        ./starship.nix
        ./music.nix
      ];

    # NFS
    fileSystems."/home/geir/nfs" = {
      device = "192.168.1.127:/mnt/storage/media";
      fsType = "nfs";
    };
    services.fstrim.enable = true;

    # Enable all unfree hardware support.
    hardware.firmware = with pkgs; [ firmwareLinuxNonfree ];
    hardware.enableAllFirmware = true;
    hardware.enableRedistributableFirmware = true;
    nixpkgs.config.allowUnfree = true;
    services.fwupd.enable = true;

    # Bootloader and Kernel
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.loader.efi.efiSysMountPoint = "/boot";
    boot.loader.systemd-boot.memtest86.enable = true;
    boot.kernelPackages = pkgs.linuxPackages_latest;
    zramSwap = {
      enable = true;
      algorithm = "zstd";
    };

    #boot.kernel.sysctl = {
    #  "net.ipv4.conf.all.forwarding" = 1;
    #  "net.ipv4.conf.default.forwarding" = 1;
    #  "net.ipv6.conf.all.forwarding" = "1";  
    #};

    # Networking
    networking.networkmanager.enable = true;
    networking.hostName = "the-sober-counsel"; # Define your hostname.

    #networking.useDHCP = true;
    #networking = {
    #  defaultGateway = { address = "192.168.1.1"; interface = "enp4s0"; };
    #  interfaces.enp4s0 = {
    #      ipv4.addresses = [
    #          { address = "192.168.1.100"; prefixLength = 24; }
    #      ];
    #   };
    #  interfaces.enp6s0 = {
    #      useDHCP = true;
    #    };

    #interfaces.br0 = {
    #  useDHCP = true;
    #  };
    #bridges = {
    #  "br0" = {
    #    interfaces = [ "enp6s0" ];
    #  };
    #  };
      #nat.enable = true;
      #nat.internalIPs = [ "10.1.1.0/24" ];
      #nat.internalInterfaces = [ "br0" ];
      #nat.externalInterface = "enp4s0";
    # };

    # User

    # Set your time zone.
    time.timeZone = "Europe/Oslo";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_US.utf8";
    # Configure console keymap
    console = {
       font = "Lat2-Terminus16";
       keyMap = "no";
     };


    i18n.extraLocaleSettings = {
      LC_ADDRESS = "nb_NO.utf8";
      LC_IDENTIFICATION = "nb_NO.utf8";
      LC_MEASUREMENT = "nb_NO.utf8";
      LC_MONETARY = "nb_NO.utf8";
      LC_NAME = "nb_NO.utf8";
      LC_NUMERIC = "nb_NO.utf8";
      LC_PAPER = "nb_NO.utf8";
      LC_TELEPHONE = "nb_NO.utf8";
      LC_TIME = "nb_NO.utf8";
    };

    # Enable the X11 windowing system.
    services.xserver.enable = true;
    services.xserver.videoDrivers = [ "amdgpu" ];

    # Enable the Gnome Desktop Environment.
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;
    programs.steam.enable = true;


    # Configure keymap in X11
    services.xserver = {
      layout = "no";
      xkbVariant = "";
    };

    # Enable CUPS to print documents.
    services.printing.enable = false;

    # Enable sound with pipewire.
    sound.enable = true;
    hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
    };

    # Enble flakes and other experimental features 
    nix = {
      extraOptions = "experimental-features = nix-command flakes";
      package = pkgs.nixFlakes;
    };

    # User account.
    nix.settings.trusted-users = [ "root" "geir" ];
    environment.localBinInPath = true;
    users.users.geir = {
      isNormalUser = true;
      description = "Geir Okkenhaug Jerstad";
      extraGroups = [ "networkmanager" "wheel" "libvirtd" "docker" ];
      shell = pkgs.zsh;
      packages = with pkgs; [
        # Browsers
        firefox google-chrome
        # Fonts could be in its own file
        fira-code fira-mono fira-code-symbols meslo-lgs-nf
        # Gnome
        gnome.gnome-tweaks
        arc-icon-theme beauty-line-icon-theme
        pavucontrol ncpamixer
        # Monitoring tools
        htop glances zenith bottom fwupd
        # shells & terminals
        foot
        terminator
        starship
        nushell
        fzf
        # Multiplexers
        screen
        tmux
        zellij
        direnv
        # Virtualisation
        virt-manager
        qemu
        # Editors & command line text utils
        neovim
        poppler_utils
        emacs
        emacsPackages.vterm
        libvterm libtool
        # Coding
        guile
        go gotools golint
        rustup
        # language servers
        rnix-lsp
        gopls
        luajitPackages.lua-lsp
        nodePackages.bash-language-server
        vimPlugins.cmp-nvim-lsp
        # building software
        cmake
        gcc
        bintools
        gnutar
        sccache
        # DevSecOps
        kubectl
      ];

    };
    # List packages installed in system profile. 
    environment.systemPackages = with pkgs; [
      vim sshfs
      wget curl git
      htop glances
      microcodeAmd
      calibre
    ];

    # List services that you want to enable:

    # OpenSSH daemon.
    services.openssh.enable = true;
    # Flatpack 
    services.flatpak.enable = true;
    # Tailscale
    services.tailscale.enable = true;
    networking.firewall.checkReversePath = "loose";

    # Enable home-manager
    # programs.home-manager = {
    #    enable = true;
    #   };
    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    networking.firewall.enable = false;


    system.stateVersion = "22.05";

  }

#+end_src

*** configs
**** Sway
**** tty

#+begin_src nix :tangle ~/.configs/tty.nix :mkdirp yes
{ pkgs, ... }:
{
  services.getty.greetingLine = ''\l'';

  console = {
    earlySetup = true;

    # Joker palette
    colors = [
      "1b161f"
      "ff5555"
      "54c6b5"
      "d5aa2a"
      "bd93f9"
      "ff79c6"
      "8be9fd"
      "bfbfbf"

      "1b161f"
      "ff6e67"
      "5af78e"
      "ffce50"
      "caa9fa"
      "ff92d0"
      "9aedfe"
      "e6e6e6"
    ];
  };
}

#+end_src

**** aliases
**** Musicprod
#+begin_src nix :tangle ~/.configs/music.nix
  { pkgs, ... }:
  {
    environment.systemPackages = with pkgs; [
      # sequensers
      # midious from steam
      # Synths
      vcv-rack
      cardinal
      # Audio editing
      audacity
      # plugins
      lsp-plugins
     ];
  }
#+end_src

**** Alacritty

#+begin_src yaml :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
  font:
    normal:
      family: MesloLGS NF
      style: Regular
    bold:
      family:  MesloLGS NF
      style: Bold

    italic:
      family:  MesloLGS NF
      style: Italic

    bold_italic:
      family:  MesloLGS NF
      style: Bold Italic

    size: 14

  import:
    - ~/.config/alacritty/dracula.yml
    
#+end_src

#+begin_src conf-unix :tangle ~/.config/alacritty/dracula.yml :mkdirp yes
# Colors (Dracula)
colors:
  # Default colors
  primary:
    background: '0x282a36'
    foreground: '0xf8f8f2'
 
  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xff5555'
    green:   '0x50fa7b'
    yellow:  '0xf1fa8c'
    blue:    '0xbd93f9'
    magenta: '0xff79c6'
    cyan:    '0x8be9fd'
    white:   '0xbbbbbb'
 
  # Bright colors
  bright:
    black:   '0x555555'
    red:     '0xff5555'
    green:   '0x50fa7b'
    yellow:  '0xf1fa8c'
    blue:    '0xcaa9fa'
    magenta: '0xff79c6'
    cyan:    '0x8be9fd'
    white:   '0xffffff'

#+end_src

**** Zsh
#+begin_src conf-unix :tangle ~/.zshrc :mkdirp yes
      zstyle ':completion:*' completer _expand _complete _ignored
      zstyle ':completion:*' matcher-list ''
      zstyle :compinstall filename '/home/geir/.zshrc'

      autoload -Uz compinit
      compinit
      HISTFILE=~/.histfile
      HISTSIZE=10000
      SAVEHIST=10000
      setopt autocd extendedglob
      unsetopt beep nomatch
      bindkey -e

      eval "$(starship init zsh)"
      eval "$(direnv hook zsh)"

#+end_src

#+begin_src nix :tangle ~/.configs/zsh.nix :mkdirp yes
  { config, pkgs, ... }:
  {
    environment.systemPackages = with pkgs;
      [
        zsh
        zsh-completions
        nix-zsh-completions
      ];

    programs.zsh.enable = true;
    programs.zsh.syntaxHighlighting.enable = true;
    programs.zsh.autosuggestions.enable = true;
  }

#+end_src

**** Starship
#+begin_src nix :tangle ~/.configs/starship.nix
  { pkgs, ... }:
  {
    environment.systemPackages = with pkgs; [
      starship
     ];
  }
#+end_src

#+begin_src conf-unix :tangle ~/.config/starship.toml :mkdirp yes

  # Editor completions based on the config schema
  "$schema" = 'https://starship.rs/config-schema.json'

  # Use custom format
  format = '''(bold purple)$all '''

  # Inserts a blank line between shell prompts
  add_newline = true

  [aws]
  style = "bold #ffb86c"

  [character]
  error_symbol = "[λ](bold #ff5555)"
  success_symbol = "[λ](bold #50fa7b)" # ❄

  [cmd_duration]
  style = "bold #f1fa8c"

  [directory]
  style = "bold #50fa7b"

  [git_branch]
  style = "bold #ff79c6"

  [git_status]
  style = "bold #ff5555"

  [hostname]
  style = "bold #bd93f9"

  [username]
  format = "[$user]($style) on "
  style_user = "bold #8be9fd"

#+end_src

**** Bash

#+begin_src conf-unix :tangle ~/.bashrc
  eval "$(starship init bash)"
#+end_src

* Sources and Inspiration

  

